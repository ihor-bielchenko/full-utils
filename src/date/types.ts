
/**
 * Represents a human-readable breakdown of a time duration
 * into its fundamental components — **days**, **hours**, **minutes**, and **seconds**.
 *
 * @remarks
 * This interface is used by time utility functions such as
 * {@link secondsToParts} and {@link partsToSeconds} to represent durations
 * in a normalized structure that is easy to read, format, or serialize.
 *
 * Each field is an **integer number** representing the whole count of that unit.
 * None of the fields are fractional, and they are expected to follow
 * these conventional bounds when generated by {@link secondsToParts}:
 *
 * ```
 * days    ≥ 0
 * hours   ∈ [0, 23]
 * minutes ∈ [0, 59]
 * seconds ∈ [0, 59]
 * ```
 *
 * However, when constructing manually, these constraints are **not enforced**
 * by TypeScript — it is up to the user or calling function to maintain validity.
 *
 * @example
 * ```ts
 * // Example 1: Typical decomposition
 * const t: TimeParts = { days: 1, hours: 2, minutes: 30, seconds: 45 };
 *
 * // Example 2: Used with utility converters
 * const total = partsToSeconds(t);   // -> 95445
 * const back  = secondsToParts(total); // -> same structure again
 * ```
 *
 * @example
 * ```ts
 * // Example 3: Display formatting
 * const p: TimeParts = { days: 0, hours: 5, minutes: 3, seconds: 9 };
 * console.log(`${p.hours}h ${p.minutes}m ${p.seconds}s`);
 * // -> "5h 3m 9s"
 * ```
 *
 * @property days - Whole number of days (24-hour periods).
 * @property hours - Whole number of hours in the remaining day (0–23 typical).
 * @property minutes - Whole number of minutes (0–59 typical).
 * @property seconds - Whole number of seconds (0–59 typical).
 *
 * @see {@link secondsToParts} — converts total seconds into this structure.
 * @see {@link partsToSeconds} — converts this structure back into total seconds.
 *
 * @public
 * @category Date & Time
 * @since 1.0.0
 */
export interface TimeParts {
	days: number;
	hours: number;
	minutes: number;
	seconds: number;
}
